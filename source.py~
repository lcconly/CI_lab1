#!/usr/bin/env python
# coding=utf-8
#************************************************************************
#	> File Name: KNN.py
#	> Author: liucheng
#	> Mail: lcconlycs@gmail.com 
#       > Created Time: Mon 06 Feb 2017 19:27:44 PM PST
#*************************************************************************

import os,time
import numpy
from scipy.sparse import csr_matrix
from scipy.io.mmio import mminfo,mmread,mmwrite
#####get upper path of code
__location__=os.path.realpath(os.path.join(os.getcwd(),os.path.dirname(__file__)))
#*********************** two method to load data *****************************#
#**************** method one take 1.344956s to load data *********************#
'''
#####using numpy to read original data and store as an array, get former 3 item
time1=time.time()
lines=numpy.loadtxt(os.path.join(__location__,"100k.dat"),delimiter=',',dtype=bytes)
#####it will contain "b'xxxxx'" when dtype is str
#####using function csr_matrix((data,(row,col)),shape) to initial mtx
row=[]
col=[]
data=[]
for index,line in enumerate(lines):
    row.append(int(line[0])-1)
    col.append(int(line[1])-1)
    data.append(int(line[2]))
mtx=csr_matrix((data,(row,col)))
time2=time.time()
print("index:%d  time:%f shape:%d  %d"%(mtx.nnz,time2-time1,mtx.shape[0],mtx.shape[1]))
#print(mtx)
'''

#**************** method two take 0.268281s to load data *********************#
#time1=time.time()
#####read line by line to get values
lines = [line.split(',') for line in open(os.path.join(__location__,"100k.dat"))]
row=[]
col=[]
data=[]
for index,line in enumerate(lines):
    row.append(int(line[0])-1)
    col.append(int(line[1])-1)
    data.append(int(line[2]))
mtx=csr_matrix((data,(row,col)))
#time2=time.time()
#print("index:%d  time:%f shape:%d  %d"%(mtx.nnz,time2-time1,mtx.shape[0],mtx.shape[1]))

mmwrite("MovieLens.mtx",mtx)

#####print the number of users, items, ratings to file
f=open(os.path.join(__location__,"number_count.txt"),'w')
print("the number of user: %d\nthe number of item: %d\nthe number of rating: %d"%(mtx.shape[0],mtx.shape[1],mtx.nnz),file=f)
f.close()

#####print the Mathematic Aggregation for per users to file
f=open(os.path.join(__location__,"mean_median_dev_max_min_for_users.txt"),'w')
print("the number of user is %d"%(mtx.shape[0]),file=f)
for index in range(0,mtx.shape[0]):
    user_rates=mtx.getrow(index).toarray()
    print("%d,%f,%f,%f,%d,%d"%(index+1,numpy.mean(user_rates),numpy.median(user_rates),
            numpy.var(user_rates),numpy.max(user_rates),numpy.min(user_rates)), file=f)
f.close()


#####print the Mathematic Aggregation for per items to file
f=open(os.path.join(__location__,"mean_median_dev_max_min_for_items.txt"),'w')
print("the number of item is %d"%(mtx.shape[1]),file=f)
for index in range(0,mtx.shape[1]):
    item_rates=mtx.getcol(index).toarray()
    print("%d,%f,%f,%f,%d,%d"%(index+1,numpy.mean(item_rates),numpy.median(item_rates),
            numpy.var(item_rates),numpy.max(item_rates),numpy.min(item_rates)), file=f)
f.close()

#####print count of each rating to file
f=open(os.path.join(__location__,"number_of_each_rating.txt"),'w')
count_rate=[0,0,0,0,0,0]
row=mtx.nonzero()[0]
print(row)
col=mtx.nonzero()[1]
for index in range(len(mtx.nonzero()[0])):
    if mtx[row[index],col[index]]==0:
       count_rate[0]=count_rate[0]+1
    elif mtx[row[index],col[index]]==1:
       count_rate[1]=count_rate[1]+1
    elif mtx[row[index],col[index]]==2:
       count_rate[2]=count_rate[2]+1
    elif mtx[row[index],col[index]]==3:
       count_rate[3]=count_rate[3]+1
    elif mtx[row[index],col[index]]==4:
       count_rate[4]=count_rate[4]+1
    elif mtx[row[index],col[index]]==5:
       count_rate[5]=count_rate[5]+1
print("the number of 0-star is %d\nthe number of 1-star is %d\nthe number of 2-star is %d\n"%()
      +"the number of 3-star is %d\nthe number of 4-star is %d\nthe number of 5-star is %d"%(count_rate[0],count_rate[1],count_rate[2],count_rate[3],count_rate[4],count_rate[5]))
        
